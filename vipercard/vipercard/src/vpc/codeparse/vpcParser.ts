
/* auto */ import { ChvParser } from '../../vpc/codeparse/bridgeChv.js';
/* auto */ import { tks } from '../../vpc/codeparse/vpcTokens.js';

/**
 * parser class for VPC language.
 * generated by the genparse.py Python script.
 */
export class VpcChvParser extends ChvParser {
    constructor(input: any[], inlistTokens: any) {
        /* if needed, we can adjust the "maxLookahead" here
        with arguments like { outputCst: true, maxLookahead:8 }
        if that warning appears, though, in my experience 99.9% of
        the time it means you should fix something wrong in the
        grammar rather than to actually increase the maxLookahead. */
        super(input, inlistTokens, { outputCst: true });
        ChvParser.performSelfAnalysis(this);
    }

    /* generated code, any changes past this point will be lost: --------------- */

    RuleHOrdinal = this.RULE('RuleHOrdinal', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.CONSUME1(tks.TokenTkordinal);
    });

    RuleHPosition = this.RULE('RuleHPosition', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.CONSUME1(tks.TokenTkidentifier);
    });

    RuleHSimpleContainer = this.RULE('RuleHSimpleContainer', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectPart);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkidentifier);
                }
            }
        ]);
    });

    RuleHContainer = this.RULE('RuleHContainer', () => {
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleHChunk);
        });
        this.SUBRULE1(this.RuleHSimpleContainer);
    });

    RuleHChunk = this.RULE('RuleHChunk', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkcharorwordoritemorlineorplural);
                    this.SUBRULE1(this.RuleHChunk_1);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHOrdinal);
                    this.CONSUME2(tks.TokenTkcharorwordoritemorlineorplural);
                }
            }
        ]);
        this.SUBRULE1(this.RuleOf);
    });

    RuleHChunk_1 = this.RULE('RuleHChunk_1', () => {
        this.SUBRULE1(this.RuleHChunkAmt);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTo);
            this.SUBRULE2(this.RuleHChunkAmt);
        });
    });

    RuleHChunkAmt = this.RULE('RuleHChunkAmt', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTklparen);
                    this.SUBRULE1(this.RuleExpr);
                    this.CONSUME1(tks.TokenTkrparen);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTknumliteral);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHSimpleContainer);
                }
            }
        ]);
    });

    RuleObject_1 = this.RULE('RuleObject_1', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.CONSUME1(tks.TokenTkidentifier);
    });

    RuleObject = this.RULE('RuleObject', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectBtn);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectFld);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectCard);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectBg);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectStack);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObject_1);
                }
            }
        ]);
    });

    RuleObjectBtn = this.RULE('RuleObjectBtn', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkcardorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbkgndorpluralsyn);
                }
            }
        ]);
        this.OR2([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbtnorpluralsyn);
                    this.CONSUME1(tks.TokenId);
                    this.SUBRULE1(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkbtnorpluralsyn);
                    this.SUBRULE2(this.RuleLvl6Expression);
                }
            }
        ]);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectCard);
        });
    });

    RuleObjectFld = this.RULE('RuleObjectFld', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkcardorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbkgndorpluralsyn);
                }
            }
        ]);
        this.OR2([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkfldorpluralsyn);
                    this.CONSUME1(tks.TokenId);
                    this.SUBRULE1(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkfldorpluralsyn);
                    this.SUBRULE2(this.RuleLvl6Expression);
                }
            }
        ]);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectCard);
        });
    });

    RuleObjectCard = this.RULE('RuleObjectCard', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkcardorpluralsyn);
                    this.CONSUME1(tks.TokenId);
                    this.SUBRULE1(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkcardorpluralsyn);
                    this.SUBRULE2(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHOrdinal);
                    this.CONSUME3(tks.TokenTkcardorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHPosition);
                    this.CONSUME4(tks.TokenTkcardorpluralsyn);
                }
            }
        ]);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectBg);
        });
    });

    RuleObjectBg = this.RULE('RuleObjectBg', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbkgndorpluralsyn);
                    this.CONSUME1(tks.TokenId);
                    this.SUBRULE1(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkbkgndorpluralsyn);
                    this.SUBRULE2(this.RuleLvl6Expression);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHOrdinal);
                    this.CONSUME3(tks.TokenTkbkgndorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHPosition);
                    this.CONSUME4(tks.TokenTkbkgndorpluralsyn);
                }
            }
        ]);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectStack);
        });
    });

    RuleObjectStack = this.RULE('RuleObjectStack', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME1(tks.TokenStack);
    });

    RuleObjectPart = this.RULE('RuleObjectPart', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectBtn);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectFld);
                }
            }
        ]);
    });

    RuleNtDest = this.RULE('RuleNtDest', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectCard);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectBg);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectStack);
                }
            }
        ]);
    });

    RuleNtVisEffect = this.RULE('RuleNtVisEffect', () => {
        this.AT_LEAST_ONE(() => {
            this.SUBRULE1(this.RuleNtVisEffectTerm);
        });
    });

    RuleNtVisEffectTerm = this.RULE('RuleNtVisEffectTerm', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkidentifier);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTo);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkinonly);
                }
            }
        ]);
    });

    RuleBuiltinCmdAdd = this.RULE('RuleBuiltinCmdAdd', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl4Expression);
        this.CONSUME1(tks.TokenTo);
        this.SUBRULE1(this.RuleHContainer);
    });

    RuleBuiltinCmdAnswer = this.RULE('RuleBuiltinCmdAnswer', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl6Expression);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTknewline);
            this.SUBRULE2(this.RuleLvl6Expression);
            this.OPTION2(() => {
                this.CONSUME1(tks.TokenOr);
                this.SUBRULE3(this.RuleLvl6Expression);
                this.OPTION3(() => {
                    this.CONSUME2(tks.TokenOr);
                    this.SUBRULE4(this.RuleLvl6Expression);
                });
            });
        });
    });

    RuleBuiltinCmdAsk = this.RULE('RuleBuiltinCmdAsk', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTkcomma);
        });
        this.SUBRULE1(this.RuleExpr);
        this.OPTION2(() => {
            this.CONSUME1(tks.TokenTknewline);
            this.SUBRULE2(this.RuleExpr);
        });
    });

    RuleBuiltinCmdWait = this.RULE('RuleBuiltinCmdWait', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTknewline);
        });
        this.SUBRULE1(this.RuleExpr);
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkidentifier);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkordinal);
                }
            }
        ]);
    });

    RuleBuiltinCmdBeep = this.RULE('RuleBuiltinCmdBeep', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleExpr);
        });
    });

    RuleBuiltinCmdChoose = this.RULE('RuleBuiltinCmdChoose', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl6Expression);
        this.CONSUME1(tks.TokenTknewline);
    });

    RuleBuiltinCmdClick = this.RULE('RuleBuiltinCmdClick', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl4Expression);
        this.CONSUME1(tks.TokenTkcomma);
        this.SUBRULE2(this.RuleLvl4Expression);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTknewline);
            this.CONSUME3(tks.TokenTkidentifier);
            this.OPTION2(() => {
                this.CONSUME2(tks.TokenTkcomma);
                this.CONSUME4(tks.TokenTkidentifier);
                this.OPTION3(() => {
                    this.CONSUME3(tks.TokenTkcomma);
                    this.CONSUME5(tks.TokenTkidentifier);
                });
            });
        });
    });

    RuleBuiltinCmdCreate = this.RULE('RuleBuiltinCmdCreate', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME1(tks.TokenTkcardorpluralsyn);
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbtnorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkfldorpluralsyn);
                }
            }
        ]);
    });

    RuleBuiltinCmdDelete = this.RULE('RuleBuiltinCmdDelete', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHChunk);
                    this.SUBRULE1(this.RuleHSimpleContainer);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectPart);
                }
            }
        ]);
    });

    RuleBuiltinCmdDisable = this.RULE('RuleBuiltinCmdDisable', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleObjectBtn);
    });

    RuleBuiltinCmdDivide = this.RULE('RuleBuiltinCmdDivide', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleHContainer);
        this.CONSUME1(tks.TokenTknewline);
        this.SUBRULE1(this.RuleLvl4Expression);
    });

    RuleBuiltinCmdDrag = this.RULE('RuleBuiltinCmdDrag', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl4Expression);
        this.CONSUME1(tks.TokenTkcomma);
        this.SUBRULE2(this.RuleLvl4Expression);
        this.AT_LEAST_ONE(() => {
            this.CONSUME1(tks.TokenTo);
            this.SUBRULE3(this.RuleLvl4Expression);
            this.CONSUME2(tks.TokenTkcomma);
            this.SUBRULE4(this.RuleLvl4Expression);
        });
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTknewline);
            this.CONSUME3(tks.TokenTkidentifier);
            this.OPTION2(() => {
                this.CONSUME3(tks.TokenTkcomma);
                this.CONSUME4(tks.TokenTkidentifier);
                this.OPTION3(() => {
                    this.CONSUME4(tks.TokenTkcomma);
                    this.CONSUME5(tks.TokenTkidentifier);
                });
            });
        });
    });

    RuleBuiltinCmdEnable = this.RULE('RuleBuiltinCmdEnable', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleObjectBtn);
    });

    RuleBuiltinCmdGet = this.RULE('RuleBuiltinCmdGet', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleExpr);
    });

    RuleBuiltinCmdGoCard = this.RULE('RuleBuiltinCmdGoCard', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTo);
        });
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleNtDest);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHOrdinal);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHPosition);
                }
            }
        ]);
    });

    RuleBuiltinCmdHide = this.RULE('RuleBuiltinCmdHide', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObjectPart);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkidentifier);
                }
            }
        ]);
    });

    RuleBuiltinCmdLock = this.RULE('RuleBuiltinCmdLock', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
    });

    RuleBuiltinCmdMultiply = this.RULE('RuleBuiltinCmdMultiply', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleHContainer);
        this.CONSUME1(tks.TokenTknewline);
        this.SUBRULE1(this.RuleLvl4Expression);
    });

    RuleBuiltinCmdPut = this.RULE('RuleBuiltinCmdPut', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleExpr);
        this.CONSUME1(tks.TokenTknewline);
        this.CONSUME2(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTknewline);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleHContainer);
        });
    });

    RuleBuiltinCmdReplace = this.RULE('RuleBuiltinCmdReplace', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleExpr);
        this.CONSUME1(tks.TokenTknewline);
        this.SUBRULE2(this.RuleExpr);
        this.CONSUME1(tks.TokenTkinonly);
        this.SUBRULE1(this.RuleHSimpleContainer);
    });

    RuleBuiltinCmdReset = this.RULE('RuleBuiltinCmdReset', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
    });

    RuleBuiltinCmdSet = this.RULE('RuleBuiltinCmdSet', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.SUBRULE1(this.RuleAnyPropertyName);
        this.OPTION2(() => {
            this.CONSUME1(tks.TokenTkofonly);
            this.OR1([
                {
                    ALT: () => {
                        this.SUBRULE1(this.RuleHChunk);
                        this.SUBRULE1(this.RuleObjectFld);
                    }
                },
                {
                    ALT: () => {
                        this.SUBRULE1(this.RuleObject);
                    }
                }
            ]);
        });
        this.CONSUME1(tks.TokenTo);
        this.SUBRULE1(this.RuleAnyPropertyVal);
    });

    RuleBuiltinCmdShow = this.RULE('RuleBuiltinCmdShow', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleShow_1);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleShow_2);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkidentifier);
                }
            }
        ]);
    });

    RuleShow_1 = this.RULE('RuleShow_1', () => {
        this.SUBRULE1(this.RuleObjectPart);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTknewline);
            this.SUBRULE1(this.RuleLvl4Expression);
            this.CONSUME1(tks.TokenTkcomma);
            this.SUBRULE2(this.RuleLvl4Expression);
        });
    });

    RuleShow_2 = this.RULE('RuleShow_2', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTkidentifier);
        });
        this.CONSUME1(tks.TokenTkcardorpluralsyn);
    });

    RuleBuiltinCmdSort = this.RULE('RuleBuiltinCmdSort', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME2(tks.TokenTkidentifier);
        });
        this.CONSUME1(tks.TokenTkcharorwordoritemorlineorplural);
        this.SUBRULE1(this.RuleOf);
        this.SUBRULE1(this.RuleHContainer);
        this.OPTION2(() => {
            this.CONSUME3(tks.TokenTkidentifier);
        });
    });

    RuleBuiltinCmdSubtract = this.RULE('RuleBuiltinCmdSubtract', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleLvl4Expression);
        this.CONSUME1(tks.TokenTknewline);
        this.SUBRULE1(this.RuleHContainer);
    });

    RuleBuiltinCmdUnlock = this.RULE('RuleBuiltinCmdUnlock', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
        this.OPTION1(() => {
            this.CONSUME3(tks.TokenTkidentifier);
            this.SUBRULE1(this.RuleNtVisEffect);
        });
    });

    RuleBuiltinCmdVisual = this.RULE('RuleBuiltinCmdVisual', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleNtVisEffect);
    });

    RuleBuiltinCmdPlay = this.RULE('RuleBuiltinCmdPlay', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleExpr);
        this.OPTION1(() => {
            this.CONSUME2(tks.TokenTkidentifier);
        });
    });

    RuleAnyPropertyName = this.RULE('RuleAnyPropertyName', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenId);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkidentifier);
                }
            }
        ]);
    });

    RuleAnyPropertyVal = this.RULE('RuleAnyPropertyVal', () => {
        this.AT_LEAST_ONE_SEP({
            SEP: tks.TokenTkcomma,
            DEF: () => {
                this.SUBRULE1(this.RuleLvl4Expression);
            }
        });
    });

    RuleOf = this.RULE('RuleOf', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkofonly);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkinonly);
                }
            }
        ]);
    });

    RuleFnCall = this.RULE('RuleFnCall', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallLength);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallWithParens);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallWithoutParensOrGlobalGetPropOrTarget);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallNumberOf);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleExprThereIs);
                }
            }
        ]);
    });

    RuleFnCallLength = this.RULE('RuleFnCallLength', () => {
        this.CONSUME1(tks.TokenThe);
        this.CONSUME1(tks.TokenLength);
        this.CONSUME1(tks.TokenTkofonly);
        this.SUBRULE1(this.RuleLvl6Expression);
    });

    RuleFnCallWithParens = this.RULE('RuleFnCallWithParens', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkidentifier);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenLength);
                }
            }
        ]);
        this.CONSUME1(tks.TokenTklparen);
        this.MANY_SEP({
            SEP: tks.TokenTkcomma,
            DEF: () => {
                this.SUBRULE1(this.RuleExpr);
            }
        });
        this.CONSUME1(tks.TokenTkrparen);
    });

    RuleFnCallWithoutParensOrGlobalGetPropOrTarget = this.RULE('RuleFnCallWithoutParensOrGlobalGetPropOrTarget', () => {
        this.CONSUME1(tks.TokenThe);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenTkadjective);
        });
        this.CONSUME1(tks.TokenTkidentifier);
    });

    RuleFnCallNumberOf = this.RULE('RuleFnCallNumberOf', () => {
        this.CONSUME1(tks.TokenThe);
        this.CONSUME1(tks.TokenNumber);
        this.CONSUME1(tks.TokenTkofonly);
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallNumberOf_1);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallNumberOf_2);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallNumberOf_3);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCallNumberOf_4);
                }
            }
        ]);
    });

    RuleFnCallNumberOf_1 = this.RULE('RuleFnCallNumberOf_1', () => {
        this.CONSUME1(tks.TokenTkcharorwordoritemorlineorplural);
        this.SUBRULE1(this.RuleOf);
        this.SUBRULE1(this.RuleLvl6Expression);
    });

    RuleFnCallNumberOf_2 = this.RULE('RuleFnCallNumberOf_2', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkcardorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbkgndorpluralsyn);
                }
            }
        ]);
        this.OR2([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkbtnorpluralsyn);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkfldorpluralsyn);
                }
            }
        ]);
    });

    RuleFnCallNumberOf_3 = this.RULE('RuleFnCallNumberOf_3', () => {
        this.CONSUME1(tks.TokenTkcardorpluralsyn);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectBg);
        });
        this.OPTION2(() => {
            this.SUBRULE2(this.RuleOf);
            this.SUBRULE1(this.RuleObjectStack);
        });
    });

    RuleFnCallNumberOf_4 = this.RULE('RuleFnCallNumberOf_4', () => {
        this.CONSUME1(tks.TokenTkbkgndorpluralsyn);
        this.OPTION1(() => {
            this.SUBRULE1(this.RuleOf);
            this.SUBRULE1(this.RuleObjectStack);
        });
    });

    RuleExprSource = this.RULE('RuleExprSource', () => {
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleExprGetProperty);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleFnCall);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHSimpleContainer);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkstringliteral);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTknumliteral);
                }
            }
        ]);
    });

    RuleExprGetProperty = this.RULE('RuleExprGetProperty', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenThe);
        });
        this.OPTION2(() => {
            this.CONSUME1(tks.TokenTkadjective);
        });
        this.SUBRULE1(this.RuleAnyPropertyName);
        this.CONSUME1(tks.TokenTkofonly);
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleHChunk);
                    this.SUBRULE1(this.RuleObjectFld);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleObject);
                }
            }
        ]);
    });

    RuleExprThereIs = this.RULE('RuleExprThereIs', () => {
        this.CONSUME1(tks.TokenThere);
        this.CONSUME1(tks.TokenIs);
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenNot);
        });
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleObject);
    });

    RuleExpr = this.RULE('RuleExpr', () => {
        this.SUBRULE1(this.RuleLvl1Expression);
        this.MANY(() => {
            this.SUBRULE1(this.RuleOpLogicalOrAnd);
            this.SUBRULE2(this.RuleLvl1Expression);
        });
    });

    RuleLvl1Expression = this.RULE('RuleLvl1Expression', () => {
        this.SUBRULE1(this.RuleLvl2Expression);
        this.MANY(() => {
            this.SUBRULE1(this.RuleOpEqualityGreaterLessOrContains);
            this.SUBRULE2(this.RuleLvl2Expression);
        });
    });

    RuleLvl2Expression = this.RULE('RuleLvl2Expression', () => {
        this.SUBRULE1(this.RuleLvl3Expression);
        this.MANY(() => {
            this.CONSUME1(tks.TokenIs);
            this.SUBRULE1(this.RuleLvl2Sub);
        });
    });

    RuleLvl2Sub = this.RULE('RuleLvl2Sub', () => {
        this.OPTION1(() => {
            this.CONSUME1(tks.TokenNot);
        });
        this.OR1([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleLvl2TypeCheck);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleLvl2Within);
                }
            },
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleLvl3Expression);
                }
            }
        ]);
    });

    RuleLvl2TypeCheck = this.RULE('RuleLvl2TypeCheck', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenNumber);
                }
            },
            {
                ALT: () => {
                    this.CONSUME2(tks.TokenTkidentifier);
                }
            }
        ]);
    });

    RuleLvl2Within = this.RULE('RuleLvl2Within', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkinonly);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenWithin);
                }
            }
        ]);
        this.SUBRULE1(this.RuleLvl3Expression);
    });

    RuleLvl3Expression = this.RULE('RuleLvl3Expression', () => {
        this.SUBRULE1(this.RuleLvl4Expression);
        this.MANY(() => {
            this.SUBRULE1(this.RuleOpStringConcat);
            this.SUBRULE2(this.RuleLvl4Expression);
        });
    });

    RuleLvl4Expression = this.RULE('RuleLvl4Expression', () => {
        this.SUBRULE1(this.RuleLvl5Expression);
        this.MANY(() => {
            this.SUBRULE1(this.RuleOpPlusMinus);
            this.SUBRULE2(this.RuleLvl5Expression);
        });
    });

    RuleLvl5Expression = this.RULE('RuleLvl5Expression', () => {
        this.SUBRULE1(this.RuleLvl6Expression);
        this.MANY(() => {
            this.SUBRULE1(this.RuleOpMultDivideExpDivMod);
            this.SUBRULE2(this.RuleLvl6Expression);
        });
    });

    RuleLvl6Expression = this.RULE('RuleLvl6Expression', () => {
        this.OPTION1(() => {
            this.OR1([
                {
                    ALT: () => {
                        this.CONSUME1(tks.TokenTkplusorminus);
                    }
                },
                {
                    ALT: () => {
                        this.CONSUME1(tks.TokenNot);
                    }
                }
            ]);
        });
        this.OPTION2(() => {
            this.SUBRULE1(this.RuleHChunk);
        });
        this.OR2([
            {
                ALT: () => {
                    this.SUBRULE1(this.RuleExprSource);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTklparen);
                    this.SUBRULE1(this.RuleExpr);
                    this.CONSUME1(tks.TokenTkrparen);
                }
            }
        ]);
    });

    RuleOpLogicalOrAnd = this.RULE('RuleOpLogicalOrAnd', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenOr);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenAnd);
                }
            }
        ]);
    });

    RuleOpEqualityGreaterLessOrContains = this.RULE('RuleOpEqualityGreaterLessOrContains', () => {
        this.OR1([
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenContains);
                }
            },
            {
                ALT: () => {
                    this.CONSUME1(tks.TokenTkgreaterorlessequalorequal);
                }
            }
        ]);
    });

    RuleOpStringConcat = this.RULE('RuleOpStringConcat', () => {
        this.CONSUME1(tks.TokenTkconcatdoubleorsingle);
    });

    RuleOpPlusMinus = this.RULE('RuleOpPlusMinus', () => {
        this.CONSUME1(tks.TokenTkplusorminus);
    });

    RuleOpMultDivideExpDivMod = this.RULE('RuleOpMultDivideExpDivMod', () => {
        this.CONSUME1(tks.TokenTkmultdivideexpdivmod);
    });

    RuleTopLevelRequestEval = this.RULE('RuleTopLevelRequestEval', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.SUBRULE1(this.RuleExpr);
    });

    RuleTopLevelRequestHandlerCall = this.RULE('RuleTopLevelRequestHandlerCall', () => {
        this.CONSUME1(tks.TokenTkidentifier);
        this.CONSUME2(tks.TokenTkidentifier);
        this.MANY_SEP({
            SEP: tks.TokenTkcomma,
            DEF: () => {
                this.SUBRULE1(this.RuleExpr);
            }
        });
    });

    /* generated code, any changes above this point will be lost: --------------- */
}
