
/* auto */ import { IntermedMapOfIntermedVals, VpcIntermedValBase, VpcVal } from '../../vpc/vpcutils/vpcVal.js';
/* auto */ import { ChvIToken } from '../../vpc/codeparse/bridgeChv.js';

/* see comment at the top of _vpcAllCode_.ts for an overview */

/* generated code, any changes past this point will be lost: --------------- */

export interface VpcCompleteVisitor {
    RuleHOrdinal(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHPosition(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHSimpleContainer(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHContainer(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHChunk(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHChunk_1(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleHChunkAmt(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObject_1(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObject(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectBtn(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectFld(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectCard(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectBg(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectStack(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleObjectPart(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleNtDest(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleNtVisEffect(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleNtVisEffectTerm(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleBuiltinCmdAdd(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdAnswer(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdAsk(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdWait(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdBeep(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdChoose(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdClick(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdCreate(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdDelete(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdDisable(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdDivide(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdDrag(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdEnable(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdGet(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdGoCard(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdHide(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdLock(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdMultiply(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdPut(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdReset(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdSet(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdShow(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleShow_1(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleShow_2(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleBuiltinCmdSort(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdSubtract(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdUnlock(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdVisual(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleBuiltinCmdPlay(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleAnyPropertyName(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleAnyPropertyVal(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleOf(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCall(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallLength(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallWithParens(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallWithoutParensOrGlobalGetPropOrTarget(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallNumberOf(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallNumberOf_1(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallNumberOf_2(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallNumberOf_3(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleFnCallNumberOf_4(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleExprSource(ctx: VisitingContext): VpcVal;
    RuleExprGetProperty(ctx: VisitingContext): VpcVal;
    RuleExprThereIs(ctx: VisitingContext): VpcVal;
    RuleExpr(ctx: VisitingContext): VpcVal;
    RuleLvl1Expression(ctx: VisitingContext): VpcVal;
    RuleLvl2Expression(ctx: VisitingContext): VpcVal;
    RuleLvl2Sub(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleLvl2TypeCheck(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleLvl2Within(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleLvl3Expression(ctx: VisitingContext): VpcVal;
    RuleLvl4Expression(ctx: VisitingContext): VpcVal;
    RuleLvl5Expression(ctx: VisitingContext): VpcVal;
    RuleLvl6Expression(ctx: VisitingContext): VpcVal;
    RuleOpLogicalOrAnd(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleOpEqualityGreaterLessOrContains(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleOpStringConcat(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleOpPlusMinus(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleOpMultDivideExpDivMod(ctx: VisitingContext): string | VpcIntermedValBase;
    RuleTopLevelRequestEval(ctx: VisitingContext): IntermedMapOfIntermedVals;
    RuleTopLevelRequestHandlerCall(ctx: VisitingContext): IntermedMapOfIntermedVals;
}

export interface VisitingContext {
    [index: string]: any;
    RuleHOrdinal: any[];
    RuleHPosition: any[];
    RuleHSimpleContainer: any[];
    RuleHContainer: any[];
    RuleHChunk: any[];
    RuleHChunk_1: any[];
    RuleHChunkAmt: any[];
    RuleObject_1: any[];
    RuleObject: any[];
    RuleObjectBtn: any[];
    RuleObjectFld: any[];
    RuleObjectCard: any[];
    RuleObjectBg: any[];
    RuleObjectStack: any[];
    RuleObjectPart: any[];
    RuleNtDest: any[];
    RuleNtVisEffect: any[];
    RuleNtVisEffectTerm: any[];
    RuleShow_1: any[];
    RuleShow_2: any[];
    RuleAnyPropertyName: any[];
    RuleAnyPropertyVal: any[];
    RuleOf: any[];
    RuleFnCall: any[];
    RuleFnCallLength: any[];
    RuleFnCallWithParens: any[];
    RuleFnCallWithoutParensOrGlobalGetPropOrTarget: any[];
    RuleFnCallNumberOf: any[];
    RuleFnCallNumberOf_1: any[];
    RuleFnCallNumberOf_2: any[];
    RuleFnCallNumberOf_3: any[];
    RuleFnCallNumberOf_4: any[];
    RuleExprSource: any[];
    RuleExprGetProperty: any[];
    RuleExprThereIs: any[];
    RuleExpr: any[];
    RuleLvl1Expression: any[];
    RuleLvl2Expression: any[];
    RuleLvl2Sub: any[];
    RuleLvl2TypeCheck: any[];
    RuleLvl2Within: any[];
    RuleLvl3Expression: any[];
    RuleLvl4Expression: any[];
    RuleLvl5Expression: any[];
    RuleLvl6Expression: any[];
    RuleOpLogicalOrAnd: any[];
    RuleOpEqualityGreaterLessOrContains: any[];
    RuleOpStringConcat: any[];
    RuleOpPlusMinus: any[];
    RuleOpMultDivideExpDivMod: any[];
    TokenTkcomment: ChvIToken[];
    TokenTkcontinuedlineorwhitespace: ChvIToken[];
    TokenTknewline: ChvIToken[];
    TokenTknumliteral: ChvIToken[];
    TokenTkstringliteral: ChvIToken[];
    TokenTkbkgndorpluralsyn: ChvIToken[];
    TokenTkcardorpluralsyn: ChvIToken[];
    TokenTkbtnorpluralsyn: ChvIToken[];
    TokenTkfldorpluralsyn: ChvIToken[];
    TokenTkofonly: ChvIToken[];
    TokenTkinonly: ChvIToken[];
    TokenTkcharorwordoritemorlineorplural: ChvIToken[];
    TokenTkordinal: ChvIToken[];
    TokenTkadjective: ChvIToken[];
    TokenTkmultdivideexpdivmod: ChvIToken[];
    TokenTkgreaterorlessequalorequal: ChvIToken[];
    TokenTkconcatdoubleorsingle: ChvIToken[];
    TokenTkplusorminus: ChvIToken[];
    TokenTkcomma: ChvIToken[];
    TokenTklparen: ChvIToken[];
    TokenTkrparen: ChvIToken[];
    TokenThe: ChvIToken[];
    TokenTo: ChvIToken[];
    TokenStack: ChvIToken[];
    TokenOr: ChvIToken[];
    TokenLength: ChvIToken[];
    TokenThere: ChvIToken[];
    TokenIs: ChvIToken[];
    TokenNot: ChvIToken[];
    TokenAnd: ChvIToken[];
    TokenContains: ChvIToken[];
    TokenId: ChvIToken[];
    TokenWithin: ChvIToken[];
    TokenNumber: ChvIToken[];
    TokenTkidentifier: ChvIToken[];
}

interface VisitingContextWithin {
    name: string;
    children: VisitingContext;
}
