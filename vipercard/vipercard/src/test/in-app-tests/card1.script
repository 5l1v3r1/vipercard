on openCard
	global logCardEvts
	put ",opencd card1 cur=" & (the short name of this cd) after logCardEvts
end openCard

on closeCard
	global logCardEvts
	put ",closecd card1 cur=" & (the short name of this cd) after logCardEvts
end closeCard

on mouseUp
	if the short name of the target is "testDlgs" then
		runTestDlgs
	else if the short name of the target is "testMisc" then
		runTestMisc
	else if the short name of the target is "testValOps" then
		runTestValOps
	else if the short name of the target is "testDraw" then
		runTestDraw
	else if the short name of the target is "testGoCard" then
		runTestGoCardAndOpenCard
	end if
end mouseUp

on assertEq expected, got
	put "expected '"&expected&"' but got '"&got&"'" into tmsg
	assertTrue (expected==got), tmsg
end assertEq

on assertTrue b, tmsg
	if not b then
		log ("assertion failed " & tmsg)
		answer ("assertion failed " & tmsg)
		intentionallyStopScript
	end if
end assertTrue

on runTestDlgs
	put "" into cd fld "log"
	
	answer "we'll show many dialogs where the caption is 'true'."
	answer true or false with "c" or "b" or "a"
	answer true or false
	answer 3 > 2
	answer 2 == 2
	answer 2 is a number
	answer 2 is 2
	answer "b" is in "abc"
	answer "tr" & "ue"
	answer not false
	
	answer "we'll show many dialogs where the caption is '2'."
	answer 1+1
	answer 1*2
	answer 6 div 3
	answer (8/8 + 1)
	answer the number of chars in "ab"
	put 2 into x
	answer x
	
	answer "this is an answer dialog with btn 'Ok'" & cr & "line 2"
	put it into res
	assertEq 1, res
	answer "dialog with btn 'opt1'" \
		with "opt1"
	put it into res
	assertEq 1, res
	answer "please click 'opt1'" \
		with "opt1" or "opt2" or "opt3"
	put it into res
	assertEq 1, res
	answer "please click 'opt2'" \
		with "opt1" or "opt2" or "opt3"
	put it into res
	assertEq 2, res
	answer "please click 'opt3'" \
		with "opt1" or "opt2" or "opt3"
	put it into res
	assertEq 3, res
	ask "sample ask dialog"
	ask "sample ask dialog, text should say 'example'" \
		with "example"
	ask "please click OK" \
		with "example"
	put it into res
	assertEq "example", res
	ask "please click cancel" \
		with "example"
	put it into res
	assertEq "", res
	ask "please type test1 and click OK" \
		with "example"
	put it into res
	assertEq "test1", res
	repeat
		answer ("let's see if we can exit an infinite "&\
			"loop. click the stop icon (black "&\
			"rectangle) to exit this loop")
		log "."
	end repeat
	answer "should not see this."
	assertTrue false, "notreached"
end runTestDlgs

on runTestValOps
	put "3" into cd fld "fldTest"
	multiply cd fld "fldTest" by 4
	assertEq 12, cd fld "fldTest"
	multiply cd fld "fldTest" by 5
	assertEq 60, cd fld "fldTest"
	divide cd fld "fldTest" by 3
	assertEq 20, cd fld "fldTest"
	divide cd fld "fldTest" by 2
	assertEq 10, cd fld "fldTest"
	add 4 to cd fld "fldTest"
	assertEq 14, cd fld "fldTest"
	add 6 to cd fld "fldTest"
	assertEq 20, cd fld "fldTest"
	subtract 15 from cd fld "fldTest"
	assertEq 5, cd fld "fldTest"
	subtract 6 from cd fld "fldTest"
	assertEq -1, cd fld "fldTest"
	put "aa,cc" into cd fld "fldTest"
	delete char 2 of cd fld "fldTest"
	assertEq "a,cc", cd fld "fldTest"
	delete char 2 to 3 of cd fld "fldTest"
	assertEq "ac", cd fld "fldTest"
	put "" into cd fld "fldTest"
	
	put "ddd,aaa,fff" into x
	assertEq "ddd,aaa,fff", x
	sort items of x
	assertEq "aaa,ddd,fff", x
	sort ascending items of x
	assertEq "aaa,ddd,fff", x
	sort descending items of x
	assertEq "fff,ddd,aaa", x
	disable cd btn "btnTest1"
	answer "btnTest1 should be disabled."
	enable cd btn "btnTest1"
	answer "btnTest1 should be enabled."
	hide cd btn "btnTest1"
	answer "btnTest1 should be hidden."
	show cd btn "btnTest1"
	answer "btnTest1 should be visible."
	
	put "abcdefabcdefabcdefabcdef" into cd fld "fldTest"
	set the visible of cd fld "fldTest" to false
	answer "testfld should be hidden"
	set the visible of cd fld "fldTest" to true
	answer "testfld should be visible"
	set the textalign of cd fld "fldTest" to "center"
	answer "testfld should be centered"
	set the textalign of cd fld "fldTest" to "left"
	answer "testfld should be alignleft"
	set the dontwrap of cd fld "fldTest" to true
	answer "testfld should be wrapping off"
	set the dontwrap of cd fld "fldTest" to false
	answer "testfld should be wrapping on"
	set the textsize of cd fld "fldTest" to 24
	answer "testfld should be big text"
	set the textsize of cd fld "fldTest" to 12
	answer "testfld should be normal text"
	set the textsize of char 2 to 4 of \
		cd fld "fldTest" to 24
	answer "testfld 'bcd' should be big"
	set the textsize of char 2 to 4 of \
		cd fld "fldTest" to 12
	answer "testfld 'bcd' should be normal"
	put "" into cd fld "fldTest"
	
	set the left of cd btn "btnTest1" to (the left of cd btn "btnTest1"+45)
	set the top of cd btn "btnTest1" to (the top of cd btn "btnTest1"+45)
	set the width of cd btn "btnTest1" to (the width of cd btn "btnTest1"+45)
	set the height of cd btn "btnTest1" to (the height of cd btn "btnTest1"+45)
	answer "btnTest1 should be shifted down/right and bigger"
    set the icon of cd btn "btnTest1" to 4
	answer "btnTest1 should have icon"
	set the icon of cd btn "btnTest1" to 0
	answer "btnTest1 should have no icon"
	set the left of cd btn "btnTest1" to (the left of cd btn "btnTest1"-45)
	set the top of cd btn "btnTest1" to (the top of cd btn "btnTest1"-45)
	set the width of cd btn "btnTest1" to (the width of cd btn "btnTest1"-45)
	set the height of cd btn "btnTest1" to (the height of cd btn "btnTest1"-45)
	answer "btnTest1 should be normal size"
	set the enabled of cd btn "btnTest1" to false
	answer "btnTest1 should be disabled"
	set the enabled of cd btn "btnTest1" to true
	answer "btnTest1 should be enabled"
	set the label of cd btn "btnTest1" to "changedlabel"
	answer "btnTest1 should say 'changedlabel'"
	set the style of cd btn "btnTest1" to roundrect
	answer "btnTest1 should have style changed"
	set the style of cd btn "btnTest1" to rectangle
	answer "btnTest1 should be back to rectangle"
	set the label of cd btn "btnTest1" to "(test)"
	answer "btnTest1 back to 'btnTest1'"
	set the showlabel of cd btn "btnTest1" to false
	answer "btnTest1 should not show label"
	set the showlabel of cd btn "btnTest1" to true
	answer "btnTest1 should show label"
	set the visible of cd btn "btnTest1" to false
	answer "btnTest1 should be hidden"
	set the visible of cd btn "btnTest1" to true
	answer "btnTest1 should be visible"
	set the textstyle of cd btn "btnTest1" to "bold,italic"
	answer "btnTest1 should be bold,italic"
	set the textstyle of cd btn "btnTest1" to "plain"
	answer "btnTest1 should not be bold,italic"
	answer "test complete."
end runTestValOps

on runTestMisc
	answer "about to play beep"
	beep
	go next
	put "" into cd fld "fldTest"
	answer "on card 2"
	put "hello" into cd fld "fldTest"
	answer "said 'hello'"
	go prev
	answer "back to first card"
	put "slow count 2s" into cd fld "log"
	repeat with x=1 to 5
		log x
		wait 2 second
	end repeat
	wait 2 seconds
	put "faster count 60ticks" into cd fld "log"
	repeat with x=1 to 5
		log x
		wait 60 ticks
	end repeat
	wait 2 seconds
	put "fast count 200ms" into cd fld "log"
	repeat with x=1 to 5
		log x
		wait 200 ms
	end repeat
	wait 2 seconds
	put "tests complete" into cd fld "log"
end runTestMisc

on runTestDraw
	choose brush tool
	put 0 into x
	click at 15+x, 15
	drag from 20+x, 5 to 20+x, 15
	
	add 15 to x
	choose pencil tool
	click at 15+x, 15
	drag from 20+x, 5 to 20+x, 15
	
	add 15 to x
	choose spray tool
	click at 15+x, 15
	drag from 20+x, 5 to 20+x, 15
	
	add 15 to x
	choose rect tool
	drag from 20+x, 5 to 30+x, 15
	
	add 15 to x
	choose oval tool
	drag from 20+x, 5 to 30+x, 15
	
	add 15 to x
	choose line tool
	drag from 20+x, 5 to 30+x, 15
	
	answer ("we'll now draw a lot of random pixels," & \
		"hit Stop (black rectangle) to stop.")
	
	choose pencil tool
	put 30 into minpos
	put 120 into maxpos
	put maxpos - minpos into span
	repeat with i = 1 to 99999
		put random(span) + minpos into x
		put random(span) + minpos into y
		click at x,y
	end repeat
end runTestDraw

on runTestGoCardAndOpenCard
	global openStackWasCalled
	global openBgWasCalled
	assertTrue openStackWasCalled, "failed: openStack Was not Called"
	assertTrue openBgWasCalled, "failed: openBg Was not Called"
	
	global logCardEvts
	put "" into logCardEvts
	
	-- go to nonexistent card, should fail silently
	go to card 999
	assertEq "No such card.", the result
	assertEq "", logCardEvts
	go to this card
	assertEq "", the result
	go next
	assertEq "", the result
	
	-- go by relative, by ordinal
	go first
	go next
	assertEq the short id of card 2, the short id of this card
	go prev
	assertEq the short id of card 1, the short id of this card
	go second
	assertEq the short id of card 2, the short id of this card
	go first
	assertEq the short id of card 1, the short id of this card
	
	-- test back and forth
	repeat 3 times
		go first
		assertEq the short id of card 1, the short id of this card
		go next
		assertEq the short id of card 2, the short id of this card
		go next
		assertEq the short id of card 3, the short id of this card
		go back
		assertEq the short id of card 2, the short id of this card
		go back
		assertEq the short id of card 1, the short id of this card
		go forth
		assertEq the short id of card 2, the short id of this card
		go forth
		assertEq the short id of card 3, the short id of this card
	end repeat
	
	-- going to the same card already on, shouldn't call anything
	go first
	assertEq the short id of card 1, the short id of this card
	put "" into logCardEvts
	go first
	assertEq the short id of card 1, the short id of this card
	assertEq "", logCardEvts
	
	-- test going to different cards
	go first
	put "" into logCardEvts
	go to card id (the short id of card 2)
	assertEq the short id of card 2, the short id of this card
	go to card id (the short id of card 3)
	assertEq the short id of card 3, the short id of this card
	go to card "card1"
	assertEq the short id of card 1, the short id of this card
	put ",closecd card1 cur=card1,opencd card2 cur=card2,closecd card2 cur=card2,opencd card3 cur=card3,closecd card3 cur=card3,opencd card1 cur=card1" into expected
	assertEq expected, logCardEvts
	
	answer "test complete."
end runTestGoCardAndOpenCard



